sub <- subset(data, data$ACR == 3 & data$AGS == 6)
which(sub)
sub[3,]
educ <_ read.csv("C:/users/Scott Norberg/Desktop/EdData.csv")
educ <- read.csv("C:/users/Scott Norberg/Desktop/EdData.csv")
gdp <- read.csv("C:/users/Scott Norberg/Desktop/gdp.csv")
both <- merge(educ, gdp, by.x = "CountryCode", by.y = "Country", all = FALSE)
head(both)
educ <- read.csv("C:/users/Scott Norberg/Desktop/EdData.csv")
gdp <- read.csv("C:/users/Scott Norberg/Desktop/gdp.csv")
both <- merge(educ, gdp, by.x = "CountryCode", by.y = "Country", all = FALSE)
gdp
head(gdp)
gdp <- read.csv("C:/users/Scott Norberg/Desktop/gdp.csv")
both <- merge(educ, gdp, by.x = "CountryCode", by.y = "Country", all = FALSE)
gdp$Country
both <- merge(educ, gdp, by.x = "CountryCode", by.y = "Code", all = FALSE)
gdp <- read.csv("C:/users/Scott Norberg/Desktop/gdp.csv")
both <- merge(educ, gdp, by.x = "CountryCode", by.y = "Code", all = FALSE)
sorted <- order(both$InMillions)
sorted
both$InMillions
sorted <- sort(both)
sorted <- sort(both, both$InMillions,)
sorted <- sort(both, both$InMillions)
sorted <- sort(both)
sorted <- both[with(both, order(InMillions)), ]
head(sorted)
sorted[13, ]
sorted$InMillions
sorted <- both[with(both, order(InMillions)), ]
sorted$InMillions
sorting <- order(both$InMillions)
sorting
sorted <- both$InMillions[sorting]
sorted
both$InMillions <- as.numeric(both$InMillions)
sorted <- both[with(both, order(InMillions)), ]
head(sorted)
sorted[13,]
oecd <- subset(both, both$Income.Group == "High income: OECD
")
oecd <- subset(both, both$Income.Group == "High income: OECD")
mean(both$InMillions)
sample <- read.csv("C:/users/Scott Norberg/Desktop/people-example.csv")
sample
hist(sample$age)
?hist
breaks <- c(22:26)
hist(sample$age, breaks = breaks)
plot(sample$age)
sample$age
library(plyr)
count(sample$age)
mean(sample$age)
ageplustwo <- sample$age + 2
ageplustwo
transformCountry <- function(c) {
if (c == "USA")
}
source('C:/R Packages/Testing.R')
transformCountry("HHT")
source('C:/R Packages/Testing.R')
transformCountry("HHT")
transformCountry("USA")
sample$Country
sample$CleanedCountry <- apply(sample$Country, transformCountry)
?apply
sample$CleanedCountry <- apply(sample$Country, 2, transformCountry)
sample$CleanedCountry <- apply(sample$Country, 1, transformCountry)
sample$Country
sample$CleanedCountry <- apply(sample$Country, 1:7, transformCountry)
?mapply
?sapply
sapply(sample$Country, transformCountry)
lapply(sample$Country, transformCountry)
sapply(sample$Country, transformCountry)
sample$Country
sample
source('C:/R Packages/Testing.R')
sapply(sample$Country, transformCountry)
sapply(sample$Country, transformCountry)
newCountry
debugSource('C:/R Packages/Testing.R')
sapply(sample$Country, transformCountry)
c
lapply(sample$Country, transformCountry)
sample$CC <- lapply(sample$Country, transformCountry)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
sample
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
sample$CC <- sapply(sample$Country, tC)
sample$CC
sample
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
sample$CC <- sapply(sample$Country, tC)
oldCountry
newCountry
newCountry
sample$CC <- mapply(sample$Country, tC)
?mapply
mapply(tC, sample$Country)
lapply(sample$Country, tC, simplify = TRUE)
?lapply
?vapply
vapply(sample$Country, tC)
vapply(sample$Country, tC, "")
vapply(sample$Country, tC, 1)
?by
by(sample$Country, 1:7, tC)
source('C:/R Packages/Testing.R')
sample$CC <- mapply(sample$Country, tC)
sample$CC <- sapply(sample$Country, tC)
sample$CC
snatoheuntahoeusntha,s.niha.i
source('C:/R Packages/Testing.R')
sample$CC
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC
sample$CC
sample$CC <- sapply(sample$Country, tC)
sample$CC
sample
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
source('C:/R Packages/Testing.R')
sample$CC <- sapply(sample$Country, tC)
sample$CC
sample$CC <- replace(sample$Country, x == "USA", "United States")
sample$CC <- replace(sample$Country, sample$Country == "USA", "United States")
sample$CC
hist(sample$CC)
?lm
cb <- read.csv("C:/users/Scott Norberg/Desktop/C520 R Stuff/BANK_Cleaned.csv",head=TRUE,sep=",")
cb$sex <- factor(cb$sex, levels = c(0:1), labels = c("Male", "Female"))
cb_salary_totalexp_all <- lm(cb$salary ~ cb$total_exp)
summary(cb_salary_totalexp_all)
housing <- read.csv("C:/R Data/home_data.csv")
?plot
plot(housing$sqft_living, housing$price)
allhousing <- read.csv("C:/R Data/home_data.csv")
?split
split(1:10, 1:2)
split(1:10, .8)
?split.data.frame
housing
allhousing
smp_size <- floor(0.8, nrow(allhousing))
smp_size <- floor(0.8, * nrow(allhousing))
smp_size <- floor(0.8 * nrow(allhousing))
set.seed(412)
trainingIndexes <- sample(seq_len(nrow(allhousing)), size = smp_size)
trainingIndexes
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataPreparation.R')
random.split(allhousing)
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataPreparation.R')
random.split(allhousing)
random.split(allhousing, 0.75, 103)
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataPreparation.R')
housing <- random.split(allhousing)
housing.test
housing$test
housing$train
nrow(housing$train)
nrow(housing$test)
head(allhousing)
?lm
allHousing <- read.csv("C:/R Data/home_data.csv")
bedbath <- list(allHousing$bedrooms, allHousing$bathrooms)
lm(allHousing$price, bedbath)
bedbath <- allHousing$bedrooms + allHousing$bathrooms
bedbath
lmHousing <- lm(allHousing$price, bedbath)
lmHousing <- lm(allHousing$price, allHousing$bedrooms + allHousing$bathrooms)
lmHousing <- lm(allHousing$price ~ bedbath)
summary(lmHousing)
lmHousing <- lm(allHousing$price ~ allHousing$bedrooms + allHousing$bathrooms)
summary(lmHousing)
allHousing["bedrooms"]
lmHousing <- lm(allHousing$price ~ allHousing["bedrooms"] + allHousing["bathrooms"])
Formula <- formula(paste("allHousing$price ~ ", paste(PredictorVariables, collapse=" + ")))
lmHousing
modelHousing <- method(price ~ bedrooms, data = allHousing)
?predict
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataPreparation.R')
splitHousing <- random.split(allHousing)
lmHousing <- lm(splitHousing$train$price ~ splitHousing$train$bedrooms + splitHousing$train$bathrooms)
lmHousing
predict(lmHousing, newdata = splitHousing$test)
predict(lmHousing, newdata = splitHousing$test[, -1])
predicted <- predict(lmHousing, newData = splitHousing$test[, -1])
actual <- splitHousing$test$price
rsq <- 1-sum((actual - predicted) ^ 2) / sum((actual - mean(actual))^2)
?predicte
?predict
predicted
predict(lmHousing, splitHousing$test)
predict(lmHousing, splitHousing$test$bedrooms + splitHousing$test$bathrooms)
predict(lmHousing, splitHousing$train)
predict(lmHousing, splitHousing$train)
predicted <- predict(lmHousing, splitHousing$train)
predicted
actual - predicted
length(actual)
length(predicted)
lmHousing
trainData <- data.frame(bedrooms = 3, bathrooms = 2)
predict(lmHousing, trainData)
lmHousing <- lm(price ~ bedrooms + bathrooms, data = splitHousing$train)
lmHousing
lmHousing <- lm(splitHousing$train$price ~ splitHousing$train$sqft_living)
lmHousing
predict(lmHousing, 2100)
predict(lmHousing, c(2100))
stupiddata <- data.frame(splitHousing$train$sqft_living = 2100)
stupiddata <- data.frame(sqft_living = 2100)
predict(lmHousing, stupiddata)
train <- splitHousing$train
test <- splitHousing$test
lmHousing(price ~ bedrooms + bathrooms)
lmHousing <- lm(price ~ bedrooms + bathrooms, data = train)
predict(lmHousing, test)
predicted <- predict(lmHousing, test)
rsq <- 1-sum((actual - predicted) ^ 2) / sum((actual - mean(actual))^2)
rsq
install.packages("caret")
?lm.summary
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing)
lm.summary(allHousing, "price")
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
predictors <- list(...)
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
predictors <- list(...)
lm.summary(allHousing, "price", "bedrooms", "bathrooms")
ration
ratio
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
,  ...
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", params = "bedrooms", "bathrooms")
ratio
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", predictors = c("bedrooms", "bathrooms"))
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
#predictors <- list(...)
lm.summary(allHousing, "price", predictors = c("bedrooms", "bathrooms"))
lmData
rsq
actual
predicted
length(actual)
length(predicted)
actual
target
dataset[target]
predicted
actual
length(actual)
typeof(actual)
typeof(predicted)
actual[,]
typeof(actual[,])
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", predictors = c("bedrooms", "bathrooms"))
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
lm.summary(allHousing, "price", predictors = c("bedrooms", "bathrooms"))
length(actual)
length(predicted)
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
formulaStart <- paste(target, " ~ ", sep = "")
lm.summary(allHousing, "price", predictors = c("bedrooms", "bathrooms"))
mySummary <- lm.summary(allHousing, "price", predictors = c("bathrooms", "bedrooms"))
mySummary$lm
mySummary$summary
mySummary$rSquared
debugSource('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
mySummary$rSquared
mySummary <- lm.summary(allHousing, "price", predictors = c("bathrooms", "bedrooms"))
mySummary <- lm.summary(allHousing, "price", features = c("bathrooms", "bedrooms"))
head(allHousing)
mySummary <- lm.summary(allHousing, "price", features = c("sqft_living"))
mySummary$lm
mySummary$summary
mySummary$rSquared
mySummary <- lm.summary(allHousing, "price", features = c("sqft_living", "bedrooms", "bathrooms", "sqft_lot", "floors"))
mySummary$lm
options(scipen=999)
mySummary$lm
mySummary$summary
mySummary$rSquared
?aggregate
aggregate(allHousing, zipcode, max)
head(allHousing)
install.packages("sqldf")
library(sqldf)
head(allHousing)
aggregate(price ~ zipcode, allHousing, mean)
largeHouses <- subset(allHousing, allHousing$sqft_living > 2000 & allHousing$sqft_living < 4000)
length(largeHouses)
length(allHouses)
length(allHousing)
length(allHousing)
nrow(allHousing)
nrow(largeHouses)
9111 / 21613
mySummary$summary
my_features <- lm.summary(allHousing, price, features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode"))
head(allHousing)
my_features <- lm.summary(allHousing, "price", features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode"))
advanced_features <- lm.summary(allHousing, "price", features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode", "condition", "grade", "waterfront", "view", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "lat", "long", "sqft_living15", "sqft_lot15"))
my_features$summary
advanced_features$summary
my_features <- lm.summary(allHousing, "price", features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors"))
advanced_features <- lm.summary(allHousing, "price", features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "condition", "grade", "waterfront", "view", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "lat", "long", "sqft_living15", "sqft_lot15"))
my_features$summary
advanced_features$summary
advanced_features <- lm.summary(allHousing, "price", features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "condition", "grade", "waterfront", "view", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "sqft_living15", "sqft_lot15"))
advanced_features$summary
9111 / 21613
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataAnalysis.R')
my_features <- lm.summary(allHousing, "price", features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode"))
advanced_features <- lm.summary(allHousing, "price", features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode", "condition", "grade", "waterfront", "view", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "lat", "long", "sqft_living15", "sqft_lot15"))
my_features$rsme
advanced_features$rsme
my_features <- lm.summary(allHousing, "price", seed = 0, features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode"))
my_features$rsme
advanced_features <- lm.summary(allHousing, "price", seed = 0, features = c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode", "condition", "grade", "waterfront", "view", "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "lat", "long", "sqft_living15", "sqft_lot15"))
advanced_features$rsme
my <- lm(price ~ bedrooms, bathrooms, sqft_living, sqft_lot, floors, zipcode)
my <- lm(price ~ bedrooms, bathrooms, sqft_living, sqft_lot, floors, zipcode, data = allHousing)
head(allHousing)
my <- lm(price ~ bedrooms + bathrooms + sqft_living + sqft_lot + floors + zipcode, data = allHousing)
actual <- allHousing$price
amazon <- read.csv("C:/R data/amazon_baby.csv")
toy <- subset(amazon, amazon$name == "Vull Sophie the Giraffe Teether")
toy$sentiment <- tapply(toy$rating, 1:nrow(toy), function(x) { if (x == 5 | x == 4) 1 else 0 })
toy <- subset(amazon, amazon$name == "Vulli Sophie the Giraffe Teether")
toy$sentiment <- tapply(toy$rating, 1:nrow(toy), function(x) { if (x == 5 | x == 4) 1 else 0 })
?naiveBayes
packages(e1071)
install.packages("c1071")
install.packages("e1071")
library(e1071)
?naiveBayes
bayes <- naiveBayes(sentiment ~ review, toy)
bayes
random.split <- function (dataset, ratio = 0.8, seed = 412) {
source('C:/Users/Scott Norberg/git/FunctionLibrary/DataPreparation.R')
splitter <- random.split(toy, seed = 0)
train <- splitter$train
test <- splitter$test
bayes <- naiveBayes(sentiment ~ review, toy)
bayes <- naiveBayes(sentiment ~ review, tcait)
bayes <- naiveBayes(sentiment ~ review, train)
?predict
predicted <- predict(bayes, test)
predicted
bayes
predicted <- predict(bayes, test)
head(test)
bayes
bayes$levels
bayes$call
bayes$apriori
predict(bayes)
predict(test, bayes)
?naiveBayes
bayes <- naiveBayes(sentiment ~ review, train)
bayes
bayes$apriori
bayes$tables
predict(bayes, "I'm henery the eighth I am")
predicted
toy$sentiment <- as.factor(tapply(toy$rating, 1:nrow(toy), function(x) { if (x == 5 | x == 4) 1 else 0 }))
splitter <- random.split(toy, seed = 0)
train <- splitter$train
test <- splitter$test
bayes <- naiveBayes(sentiment ~ review, data = train)
bayes
predict(bayes, test)
test$sentiment
bayes <- naiveBayes(train$review, train$sentiment)
bayes
predict(bayes, test)
predict(bayes, test$sentiment)
predict(bayes, test$review)
trainSet <- cbind(train$review, train$sentiment)
bayes <- naiveBayes(trainSet, train$sentiment)
bayes
predict(bayes, test)
predict(bayes, test$review)
matrix= create_matrix(tweets[,1], language="english",
removeStopwords=FALSE, removeNumbers=TRUE,
stemWords=FALSE)
install.packages("RTextTools")
library(RTextTools)
matrix <- rbind(train, test)
sortedToy <- rbind(train, test)
matrix= create_matrix(sortedToy$review, language="english", removeStopwords=FALSE, removeNumbers=TRUE, stemWords=FALSE)
matrix
terms = create_matrix(sortedToy$review, language="english", removeStopwords=FALSE, removeNumbers=TRUE, stemWords=FALSE)
asMatrix <- as.matrix(terms)
container = create_container(terms, as.numeric(as.factor(toy$sentiment)), trainSize=1:628, testSize=629:785,virgin=FALSE)
container
models = train_models(container, algorithms=c("MAXENT" , "SVM", "RF", "BAGGING", "TREE"))
data <- c(a = 0, b = 0, c = 0, d = 0)
data <- rbind(c(a = 0, b = 0, c = 0, d = 0),c(a = 0, b = 0, c = 1, d = 0),c(a = 0, b = 1, c = 0, d = 1),c(a = 0, b = 1, c = 1, d = 0),c(a = 1, b = 0, c = 0, d = 1),c(a = 1, b = 0, c = 1, d = 1), c(a = 1, b = 1, c = 0, d = 1),c(a = 1, b = 1, c = 1, d = 1))
datalm <- lm(data$d ~ data$a + data$b + data$c)
data
data$a
df <- data.frame(data)
lm(df)
lm(df$d ~ df$a + df$b + df$c)
data <- rbind(c(a = 0, b = 0, c = 0, d = 1),c(a = 0, b = 0, c = 1, d = 0),c(a = 0, b = 1, c = 0, d = 1),c(a = 0, b = 1, c = 1, d = 1),c(a = 1, b = 0, c = 0, d = 1),c(a = 1, b = 0, c = 1, d = 1), c(a = 1, b = 1, c = 0, d = 1),c(a = 1, b = 1, c = 1, d = 1))
df <- data.frame(data)
lm(df$d ~ df$a + df$b + df$c)
data <- rbind(c(a = 0, b = 0, c = 0, d = 0),c(a = 0, b = 0, c = 1, d = 0),c(a = 0, b = 1, c = 0, d = 0),c(a = 0, b = 1, c = 1, d = 0),c(a = 1, b = 0, c = 0, d = 0),c(a = 1, b = 0, c = 1, d = 0), c(a = 1, b = 1, c = 0, d = 1),c(a = 1, b = 1, c = 1, d = 0))
df <- data.frame(data)
lm(df$d ~ df$a + df$b + df$c)
cb <- read.csv("C:/users/snorberg/Desktop/C520 R Stuff/BANK_Cleaned_2.csv",head=TRUE,sep=",")
cb <- read.csv("C:/users/scott norberg/Desktop/C520 R Stuff/BANK_Cleaned_2.csv",head=TRUE,sep=",")
cb_prior_exp <- lm(cb$salary ~ cb$total_exp)
cb_prior_exp$coefficients
cb_prior_exp$residuals
cb_prior_exp$effects
cb_prior_exp$df.residual
lm
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
data <- rbind(c(0,1), c(1,3), c(2,7), c(3,13), c(4,21))
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
r <- Simple_linear_regression(data)
dt <- as.data.frame(data, row.names = c("X", "Y"))
dt
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
r <- simple_linear_regression(dt$V2, dt$V1)
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
r <- simple_linear_regression(dt$V2, dt$V1)
r$slope
r
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
r <- simple_linear_regression(dt$V2, dt$V1)
r$slope
r$intercept
source('C:/R Packages/Config.R')
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
lr <- lr_simple(dt$V2, dt$V1)
lr
lr_simple.predict(30, lr)
lr_simple.predict(3, lr)
lr_simple.predict(5, lr)
lr_simple.predictinv(24)
lr_simple.predictinv(24, lr)
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
lr_simple.predictinv(24, lr)
test <- read.csv("C:/users/Scott Norberg/desktop/kc_house_test_data.csv")
train <- read.csv("C:/users/Scott Norberg/desktop/kc_house_train_data.csv")
lr <- lr_simple(train$price, train$sqft_living)
lr_simple.predict(2650, lr)
lr_simple.RSS(train$price, train$sqft_living, lr)
source('C:/Users/Scott Norberg/git/FunctionLibrary/LinearRegression.R')
lr_simple.RSS(train$price, train$sqft_living, lr)
lr_simple.predictinv(800000, lr)
